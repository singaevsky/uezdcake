# telegram/client_bot.py
import os
import django
import json
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from orders.models import Order
from users.models import User
from products.models import Product

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
MAIN_KEYBOARD = [
    ['üì¶ –ú–æ–π –∑–∞–∫–∞–∑', 'üç∞ –ö–∞—Ç–∞–ª–æ–≥'],
    ['üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', '‚ÑπÔ∏è –ü–æ–º–æ—â—å'],
    ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = str(update.effective_user.id)
    username = update.effective_user.username or f"user_{telegram_id}"

    user, created = User.objects.get_or_create(
        username=username,
        defaults={
            'first_name': update.effective_user.first_name or '',
            'last_name': update.effective_user.last_name or '',
            'role': 'customer'
        }
    )

    keyboard = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫—É—é '–£–µ–∑–¥–Ω—ã–π –∫–æ–Ω–¥–∏—Ç–µ—Ä'! üéÇ\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω.\n\n"
        f"–í–∞—à Telegram ID: {telegram_id}",
        reply_markup=keyboard
    )

async def my_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = str(update.effective_user.id)
    try:
        user = User.objects.get(username__endswith=telegram_id)
        orders = Order.objects.filter(user=user).order_by('-created_at')[:5]

        if not orders:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        message = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            message += f"–ó–∞–∫–∞–∑ #{order.id}\n"
            message += f"–°—Ç–∞—Ç—É—Å: {dict(Order.STATUS_CHOICES)[order.status]}\n"
            message += f"–°—É–º–º–∞: {order.total_price} ‚ÇΩ\n"
            message += f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            message += "‚îÄ" * 20 + "\n"

        await update.message.reply_text(message)
    except User.DoesNotExist:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç.")

async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products = Product.objects.filter(is_available=True)[:6]

    if not products:
        await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç.")
        return

    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            f"{product.name} - {product.base_price} ‚ÇΩ",
            callback_data=f"product_{product.id}"
        )])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=reply_markup)

async def product_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    product_id = query.data.split('_')[1]
    try:
        product = Product.objects.get(id=product_id)

        message = f"üç∞ {product.name}\n\n"
        message += f"–¶–µ–Ω–∞: {product.base_price} ‚ÇΩ\n"
        message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n\n"
        message += "–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ—Ä—Ç?"

        keyboard = [
            [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{product.id}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Product.DoesNotExist:
        await query.edit_message_text("–¢–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def builder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–æ—Ä—Ç–æ–≤:\n\n"
        "1. –û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ—Ä—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ\n"
        "2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —ç—Å–∫–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
        "–ù–∞—à –∫–æ–Ω–¥–∏—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π!"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
‚ÑπÔ∏è –ü–æ–º–æ—â—å:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üì¶ –ú–æ–π –∑–∞–∫–∞–∑ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã
üç∞ –ö–∞—Ç–∞–ª–æ–≥ - –í—ã–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ—Ä—Ç
üë§ –ü—Ä–æ—Ñ–∏–ª—å - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã - –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã

–î–ª—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
2. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–∫–∞–∑–∞—Ç—å"
3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
"""
    await update.message.reply_text(help_text)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = str(update.effective_user.id)
    try:
        user = User.objects.get(username__endswith=telegram_id)
        profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

–ò–º—è: {user.first_name} {user.last_name}
Username: @{user.username}
–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã: {user.bonus_points}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ.
"""
        await update.message.reply_text(profile_text)
    except User.DoesNotExist:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç.")

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contacts_text = """
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:

üìç –ê–¥—Ä–µ—Å: —É–ª. –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è, –¥. 1
‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
üìß Email: info@uezdny-konditer.ru

–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!
"""
    await update.message.reply_text(contacts_text)

def main():
    app = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.Regex('üì¶ –ú–æ–π –∑–∞–∫–∞–∑'), my_order))
    app.add_handler(MessageHandler(filters.Regex('üç∞ –ö–∞—Ç–∞–ª–æ–≥'), catalog))
    app.add_handler(MessageHandler(filters.Regex('üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä'), builder))
    app.add_handler(MessageHandler(filters.Regex('‚ÑπÔ∏è –ü–æ–º–æ—â—å'), help_command))
    app.add_handler(MessageHandler(filters.Regex('üë§ –ü—Ä–æ—Ñ–∏–ª—å'), profile))
    app.add_handler(MessageHandler(filters.Regex('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'), contacts))
    app.add_handler(CallbackQueryHandler(product_detail, pattern='^product_'))

    app.run_polling()

if __name__ == '__main__':
    main()
