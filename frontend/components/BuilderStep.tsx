import React, { useState } from 'react';

interface FormData {
  event: string;
  type: string;
  shape: string;
  weight: string;
  fillings: string[];
  tiers: number;
  decoration: string;
  coating: string;
  colors: string[];
  date: string;
  sketch: File | null;
  comment: string;
}

interface BuilderStepProps {
  step: number;
  formData: FormData;
  updateFormData: (field: string, value: any) => void;
}

export const BuilderStep: React.FC<BuilderStepProps> = ({ step, formData, updateFormData }) => {
  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–°–≤–∞–¥—å–±–∞', '8 –ú–∞—Ä—Ç–∞', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', '–Æ–±–∏–ª–µ–π', '–î–µ—Ç—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫'].map(event => (
                <button
                  key={event}
                  onClick={() => updateFormData('event', event)}
                  className={`p-4 border rounded-lg text-center hover:border-chocolate transition ${
                    formData.event === event ? 'border-chocolate bg-rose-50' : 'border-gray-300'
                  }`}
                >
                  {event}
                </button>
              ))}
            </div>
          </div>
        );

      case 2:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {[
                { name: '–¢–æ—Ä—Ç', icon: 'üéÇ' },
                { name: '–ë–µ–Ω—Ç–æ', icon: 'üç±' },
                { name: '–ö–∞–ø–∫–µ–π–∫–∏', icon: 'üßÅ' },
                { name: '–ú–∞–∫–∞—Ä–æ–Ω', icon: 'üç™' },
                { name: '–ü–∏—Ä–æ–∂–Ω–æ–µ', icon: 'üç∞' },
                { name: '–ö–µ–∫—Å', icon: 'ü•Æ' }
              ].map(item => (
                <button
                  key={item.name}
                  onClick={() => updateFormData('type', item.name)}
                  className={`p-6 border rounded-lg text-center hover:border-chocolate transition ${
                    formData.type === item.name ? 'border-chocolate bg-rose-50' : 'border-gray-300'
                  }`}
                >
                  <div className="text-3xl mb-2">{item.icon}</div>
                  <div>{item.name}</div>
                </button>
              ))}
            </div>
          </div>
        );

      case 3:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {[
                { name: '–ö—Ä—É–≥', icon: '‚≠ï' },
                { name: '–ö–≤–∞–¥—Ä–∞—Ç', icon: '‚¨ú' },
                { name: '–°–µ—Ä–¥—Ü–µ', icon: '‚ù§Ô∏è' },
                { name: '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫', icon: '‚ñ≠' },
                { name: '–†–æ–º–±', icon: 'üíé' },
                { name: '–ó–≤–µ–∑–¥–∞', icon: '‚≠ê' },
                { name: '–û–≤–∞–ª', icon: 'ü•ö' },
                { name: '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è', icon: '‚úèÔ∏è' }
              ].map(shape => (
                <button
                  key={shape.name}
                  onClick={() => updateFormData('shape', shape.name)}
                  className={`p-4 border rounded-lg text-center hover:border-chocolate transition ${
                    formData.shape === shape.name ? 'border-chocolate bg-rose-50' : 'border-gray-300'
                  }`}
                >
                  <div className="text-2xl mb-2">{shape.icon}</div>
                  <div className="text-sm">{shape.name}</div>
                </button>
              ))}
            </div>
          </div>
        );

      case 4:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å/–ø–æ—Ä—Ü–∏–∏</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {[
                { weight: '0.5 –∫–≥', portions: '4 –ø–æ—Ä—Ü–∏–∏', price: '+0 ‚ÇΩ' },
                { weight: '1 –∫–≥', portions: '8 –ø–æ—Ä—Ü–∏–π', price: '+0 ‚ÇΩ' },
                { weight: '1.5 –∫–≥', portions: '12 –ø–æ—Ä—Ü–∏–π', price: '+500 ‚ÇΩ' },
                { weight: '2 –∫–≥', portions: '16 –ø–æ—Ä—Ü–∏–π', price: '+1000 ‚ÇΩ' },
                { weight: '2.5 –∫–≥', portions: '20 –ø–æ—Ä—Ü–∏–π', price: '+1500 ‚ÇΩ' },
                { weight: '3 –∫–≥', portions: '24 –ø–æ—Ä—Ü–∏–∏', price: '+2000 ‚ÇΩ' }
              ].map(item => (
                <button
                  key={item.weight}
                  onClick={() => updateFormData('weight', item.weight)}
                  className={`p-4 border rounded-lg text-center hover:border-chocolate transition ${
                    formData.weight === item.weight ? 'border-chocolate bg-rose-50' : 'border-gray-300'
                  }`}
                >
                  <div className="font-bold">{item.weight}</div>
                  <div className="text-sm text-gray-600">{item.portions}</div>
                  <div className="text-sm text-chocolate">{item.price}</div>
                </button>
              ))}
            </div>
          </div>
        );

      case 5:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫–∏ (–¥–æ 3)</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {[
                '–®–æ–∫–æ–ª–∞–¥–Ω–∞—è —Å –∞—Ä–∞—Ö–∏—Å–æ–º –∏ –∫–∞—Ä–∞–º–µ–ª—å—é',
                '–¢–≤–æ—Ä–æ–∂–Ω–æ-—è–≥–æ–¥–Ω–∞—è',
                '–í–∞–Ω–∏–ª—å–Ω–∞—è —Å —Ñ—Ä—É–∫—Ç–∞–º–∏',
                '–û—Ä–µ—Ö–æ–≤–∞—è —Å –º–µ–¥–æ–º',
                '–ö—Ä–µ–º-–±—Ä—é–ª–µ',
                '–ú–∞–ª–∏–Ω–æ–≤–∞—è —Å –º–∞–∫–æ–º',
                '–ö–æ—Ñ–µ–π–Ω–∞—è —Å —à–æ–∫–æ–ª–∞–¥–æ–º',
                '–õ–∏–º–æ–Ω–Ω–∞—è —Å –º–∞–ª–∏–Ω–æ–π',
                '–ë–∞–Ω–∞–Ω–æ–≤–∞—è —Å –∫–∞—Ä–∞–º–µ–ª—å—é',
                '–ö–ª—É–±–Ω–∏—á–Ω–∞—è —Å —Å–ª–∏–≤–∫–∞–º–∏',
                '–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤–∞—è —Å —à–æ–∫–æ–ª–∞–¥–æ–º',
                '–§–∏—Å—Ç–∞—à–∫–æ–≤–∞—è —Å –º–∞–ª–∏–Ω–æ–π'
              ].map(filling => (
                <div
                  key={filling}
                  onClick={() => {
                    const currentFillings = [...formData.fillings];
                    if (currentFillings.includes(filling)) {
                      updateFormData('fillings', currentFillings.filter(f => f !== filling));
                    } else if (currentFillings.length < 3) {
                      updateFormData('fillings', [...currentFillings, filling]);
                    }
                  }}
                  className={`p-3 border rounded-lg cursor-pointer transition ${
                    formData.fillings.includes(filling)
                      ? 'border-chocolate bg-rose-50'
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                >
                  <div className="flex items-center">
                    <div className={`w-5 h-5 rounded-full border mr-3 flex items-center justify-center ${
                      formData.fillings.includes(filling) ? 'bg-chocolate border-chocolate' : 'border-gray-400'
                    }`}>
                      {formData.fillings.includes(filling) && (
                        <span className="text-white text-xs">‚úì</span>
                      )}
                    </div>
                    <span>{filling}</span>
                  </div>
                </div>
              ))}
            </div>
            <div className="mt-4 text-sm text-gray-600">
              –í—ã–±—Ä–∞–Ω–æ: {formData.fillings.length}/3 –Ω–∞—á–∏–Ω–æ–∫
            </div>
          </div>
        );

      case 6:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—Ä—É—Å–æ–≤</h2>
            <div className="flex justify-center space-x-6">
              {[1, 2, 3].map(tier => (
                <button
                  key={tier}
                  onClick={() => updateFormData('tiers', tier)}
                  className={`w-20 h-20 rounded-full border-4 flex items-center justify-center text-2xl font-bold transition ${
                    formData.tiers === tier
                      ? 'border-chocolate bg-chocolate text-white'
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                >
                  {tier}
                </button>
              ))}
            </div>
            <div className="mt-6 text-center text-gray-600">
              {formData.tiers === 1 && '–û–¥–∏–Ω —è—Ä—É—Å - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä—Ç'}
              {formData.tiers === 2 && '–î–≤–∞ —è—Ä—É—Å–∞ - —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∏–¥'}
              {formData.tiers === 3 && '–¢—Ä–∏ —è—Ä—É—Å–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç'}
            </div>
          </div>
        );

      case 7:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∫–æ—Ä</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {[
                { name: '–¶–≤–µ—Ç—ã', icon: 'üå∏' },
                { name: '–§—Ä—É–∫—Ç—ã', icon: 'üçì' },
                { name: '–®–æ–∫–æ–ª–∞–¥', icon: 'üç´' },
                { name: '–Ø–≥–æ–¥—ã', icon: 'ü´ê' },
                { name: '–û—Ä–µ—Ö–∏', icon: 'ü•ú' },
                { name: '–ö–æ–Ω—Ñ–µ—Ç—Ç–∏', icon: 'üéâ' },
                { name: '–ù–∞–¥–ø–∏—Å–∏', icon: '‚úçÔ∏è' },
                { name: '–§–∏–≥—É—Ä–∫–∏', icon: 'üß∏' }
              ].map(decoration => (
                <button
                  key={decoration.name}
                  onClick={() => updateFormData('decoration', decoration.name)}
                  className={`p-4 border rounded-lg text-center hover:border-chocolate transition ${
                    formData.decoration === decoration.name ? 'border-chocolate bg-rose-50' : 'border-gray-300'
                  }`}
                >
                  <div className="text-2xl mb-2">{decoration.icon}</div>
                  <div className="text-sm">{decoration.name}</div>
                </button>
              ))}
            </div>
          </div>
        );

      case 8:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {[
                { name: '–ö—Ä–µ–º', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–ª–∏–≤–æ—á–Ω—ã–π –∫—Ä–µ–º' },
                { name: '–ú–∞—Å—Ç–∏–∫–∞', description: '–ì–ª–∞–¥–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º' },
                { name: '–ì–ª–∞–∑—É—Ä—å', description: '–ë–ª–µ—Å—Ç—è—â–µ–µ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ' },
                { name: '–ú–∞—Ä—Ü–∏–ø–∞–Ω', description: '–ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–∑ –º–∏–Ω–¥–∞–ª—è' },
                { name: '–®–æ–∫–æ–ª–∞–¥', description: '–ì–∞–Ω–∞—à –∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–æ–∫–æ–ª–∞–¥' },
                { name: '–ú–µ—Ä–µ–Ω–≥–∞', description: '–í–æ–∑–¥—É—à–Ω–æ–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ' }
              ].map(coating => (
                <button
                  key={coating.name}
                  onClick={() => updateFormData('coating', coating.name)}
                  className={`p-4 border rounded-lg text-left hover:border-chocolate transition ${
                    formData.coating === coating.name ? 'border-chocolate bg-rose-50' : 'border-gray-300'
                  }`}
                >
                  <div className="font-bold">{coating.name}</div>
                  <div className="text-sm text-gray-600 mt-1">{coating.description}</div>
                </button>
              ))}
            </div>
          </div>
        );

      case 9:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–∞ (–¥–æ 2)</h2>
            <div className="grid grid-cols-3 md:grid-cols-6 gap-3">
              {[
                '#FF69B4', '#FF1493', '#FF6347', '#FF4500', '#FFD700', '#FFA500',
                '#ADFF2F', '#32CD32', '#00FF7F', '#00CED1', '#1E90FF', '#4169E1',
                '#8A2BE2', '#9370DB', '#FF69B4', '#F5DEB3', '#FFFFFF', '#000000'
              ].map(color => (
                <div
                  key={color}
                  onClick={() => {
                    const currentColors = [...formData.colors];
                    if (currentColors.includes(color)) {
                      updateFormData('colors', currentColors.filter(c => c !== color));
                    } else if (currentColors.length < 2) {
                      updateFormData('colors', [...currentColors, color]);
                    }
                  }}
                  className={`w-12 h-12 rounded-full border-2 cursor-pointer transition ${
                    formData.colors.includes(color) ? 'border-chocolate ring-2 ring-chocolate' : 'border-gray-300'
                  }`}
                  style={{ backgroundColor: color }}
                >
                  {formData.colors.includes(color) && (
                    <div className="w-full h-full flex items-center justify-center">
                      <span className="text-white text-lg">‚úì</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
            <div className="mt-4 text-sm text-gray-600">
              –í—ã–±—Ä–∞–Ω–æ: {formData.colors.length}/2 —Ü–≤–µ—Ç–∞
            </div>
          </div>
        );

      case 10:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è</h2>
            <div className="max-w-md mx-auto">
              <input
                type="date"
                value={formData.date}
                onChange={(e) => updateFormData('date', e.target.value)}
                min={new Date().toISOString().split('T')[0]}
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:border-chocolate"
              />
              <div className="mt-4 text-sm text-gray-600">
                ‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–∞ –¥–∞—Ç—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 3 –¥–Ω—è –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
              </div>
            </div>
          </div>
        );

      case 11:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Å–∫–∏–∑ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</h2>
            <div className="max-w-md mx-auto border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
              {formData.sketch ? (
                <div>
                  <div className="text-green-600 mb-2">‚úì –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</div>
                  <div className="text-sm text-gray-600">{formData.sketch.name}</div>
                  <button
                    onClick={() => updateFormData('sketch', null)}
                    className="mt-2 text-red-500 hover:underline"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              ) : (
                <>
                  <div className="text-4xl mb-4">üìÅ</div>
                  <p className="mb-4">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => {
                      if (e.target.files && e.target.files[0]) {
                        updateFormData('sketch', e.target.files[0]);
                      }
                    }}
                    className="hidden"
                    id="sketch-upload"
                  />
                  <label
                    htmlFor="sketch-upload"
                    className="bg-chocolate text-white px-4 py-2 rounded cursor-pointer hover:bg-opacity-90 transition"
                  >
                    –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
                  </label>
                  <div className="mt-2 text-sm text-gray-600">
                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, –¥–æ 5 –ú–ë
                  </div>
                </>
              )}
            </div>
          </div>
        );

      case 12:
        return (
          <div>
            <h2 className="text-2xl font-serif mb-6">–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</h2>
            <div className="max-w-2xl mx-auto">
              <textarea
                value={formData.comment}
                onChange={(e) => updateFormData('comment', e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–¥–µ–ª–∞—Ç—å –Ω–∞–¥–ø–∏—Å—å '–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!' –∫—Ä—É–ø–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏"
                rows={5}
                className="w-full p-4 border border-gray-300 rounded-lg focus:outline-none focus:border-chocolate resize-none"
              />
              <div className="mt-2 text-sm text-gray-600 text-right">
                {formData.comment.length}/500 —Å–∏–º–≤–æ–ª–æ–≤
              </div>
            </div>
          </div>
        );

      default:
        return <div>–®–∞–≥ {step}</div>;
    }
  };

  return <div>{renderStep()}</div>;
};
