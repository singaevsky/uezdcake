// frontend/pages/builder.tsx
import React, { useState } from 'react';
import Head from 'next/head';
import Link from 'next/link';

// –¢–∏–ø—ã –¥–ª—è —à–∞–≥–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
type BuilderStep =
  | 'event'
  | 'type'
  | 'shape'
  | 'weight'
  | 'fillings'
  | 'tiers'
  | 'decoration'
  | 'coating'
  | 'colors'
  | 'date'
  | 'sketch'
  | 'comment';

interface CakeConfig {
  event: string;
  type: string;
  shape: string;
  weight: string;
  fillings: string[];
  tiers: number;
  decoration: string;
  coating: string;
  colors: string[];
  date: string;
  sketch: File | null;
  comment: string;
}

const CakeBuilder: React.FC = () => {
  const [currentStep, setCurrentStep] = useState<BuilderStep>('event');
  const [config, setConfig] = useState<CakeConfig>({
    event: '',
    type: '',
    shape: '',
    weight: '',
    fillings: [],
    tiers: 1,
    decoration: '',
    coating: '',
    colors: [],
    date: '',
    sketch: null,
    comment: ''
  });

  const steps: { id: BuilderStep; title: string }[] = [
    { id: 'event', title: '–°–æ–±—ã—Ç–∏–µ' },
    { id: 'type', title: '–¢–∏–ø' },
    { id: 'shape', title: '–§–æ—Ä–º–∞' },
    { id: 'weight', title: '–í–µ—Å' },
    { id: 'fillings', title: '–ù–∞—á–∏–Ω–∫–∏' },
    { id: 'tiers', title: '–Ø—Ä—É—Å—ã' },
    { id: 'decoration', title: '–î–µ–∫–æ—Ä' },
    { id: 'coating', title: '–ü–æ–∫—Ä—ã—Ç–∏–µ' },
    { id: 'colors', title: '–¶–≤–µ—Ç–∞' },
    { id: 'date', title: '–î–∞—Ç–∞' },
    { id: 'sketch', title: '–≠—Å–∫–∏–∑' },
    { id: 'comment', title: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' }
  ];

  const updateConfig = (field: keyof CakeConfig, value: any) => {
    setConfig(prev => ({ ...prev, [field]: value }));
  };

  const nextStep = () => {
    const currentIndex = steps.findIndex(s => s.id === currentStep);
    if (currentIndex < steps.length - 1) {
      setCurrentStep(steps[currentIndex + 1].id);
    }
  };

  const prevStep = () => {
    const currentIndex = steps.findIndex(s => s.id === currentStep);
    if (currentIndex > 0) {
      setCurrentStep(steps[currentIndex - 1].id);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 'event':
        return (
          <div>
            <h3 className="text-xl font-bold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ</h3>
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
              {['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–°–≤–∞–¥—å–±–∞', '–Æ–±–∏–ª–µ–π', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', '8 –ú–∞—Ä—Ç–∞', '–î–µ—Ç—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫'].map(event => (
                <button
                  key={event}
                  className={`p-3 border rounded-lg text-center hover:border-chocolate transition ${
                    config.event === event ? 'border-chocolate bg-rose-50 font-bold' : 'border-gray-300'
                  }`}
                  onClick={() => updateConfig('event', event)}
                >
                  {event}
                </button>
              ))}
            </div>
          </div>
        );
      case 'type':
        return (
          <div>
            <h3 className="text-xl font-bold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ—Å–µ—Ä—Ç–∞</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              {[
                { name: '–¢–æ—Ä—Ç', icon: 'üéÇ' },
                { name: '–ë–µ–Ω—Ç–æ-—Ç–æ—Ä—Ç', icon: 'üç±' },
                { name: '–ö–∞–ø–∫–µ–π–∫–∏', icon: 'üßÅ' },
                { name: '–ú–∞–∫–∞—Ä–æ–Ω', icon: 'üç™' },
                { name: '–ü–∏—Ä–æ–∂–Ω–æ–µ', icon: 'üç∞' },
                { name: '–ö–µ–∫—Å', icon: 'ü•Æ' }
              ].map(item => (
                <button
                  key={item.name}
                  className={`p-4 border rounded-lg text-center hover:border-chocolate transition flex flex-col items-center ${
                    config.type === item.name ? 'border-chocolate bg-rose-50 font-bold' : 'border-gray-300'
                  }`}
                  onClick={() => updateConfig('type', item.name)}
                >
                  <span className="text-2xl mb-2">{item.icon}</span>
                  <span>{item.name}</span>
                </button>
              ))}
            </div>
          </div>
        );
      case 'shape':
        return (
          <div>
            <h3 className="text-xl font-bold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É</h3>
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
              {[
                { name: '–ö—Ä—É–≥', icon: '‚≠ï' },
                { name: '–ö–≤–∞–¥—Ä–∞—Ç', icon: '‚¨ú' },
                { name: '–°–µ—Ä–¥—Ü–µ', icon: '‚ù§Ô∏è' },
                { name: '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫', icon: '‚ñ≠' },
                { name: '–†–æ–º–±', icon: 'üíé' },
                { name: '–ó–≤–µ–∑–¥–∞', icon: '‚≠ê' },
                { name: '–û–≤–∞–ª', icon: 'ü•ö' },
                { name: '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è', icon: '‚úèÔ∏è' }
              ].map(shape => (
                <button
                  key={shape.name}
                  className={`p-3 border rounded-lg text-center hover:border-chocolate transition ${
                    config.shape === shape.name ? 'border-chocolate bg-rose-50 font-bold' : 'border-gray-300'
                  }`}
                  onClick={() => updateConfig('shape', shape.name)}
                >
                  <div className="text-xl mb-1">{shape.icon}</div>
                  <div className="text-xs">{shape.name}</div>
                </button>
              ))}
            </div>
          </div>
        );
      case 'weight':
        return (
          <div>
            <h3 className="text-xl font-bold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å/–ø–æ—Ä—Ü–∏–∏</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
              {[
                { weight: '0.5 –∫–≥', portions: '4 –ø–æ—Ä—Ü–∏–∏', price: '+0 ‚ÇΩ' },
                { weight: '1 –∫–≥', portions: '8 –ø–æ—Ä—Ü–∏–π', price: '+0 ‚ÇΩ' },
                { weight: '1.5 –∫–≥', portions: '12 –ø–æ—Ä—Ü–∏–π', price: '+500 ‚ÇΩ' },
                { weight: '2 –∫–≥', portions: '16 –ø–æ—Ä—Ü–∏–π', price: '+1000 ‚ÇΩ' },
                { weight: '2.5 –∫–≥', portions: '20 –ø–æ—Ä—Ü–∏–π', price: '+1500 ‚ÇΩ' },
                { weight: '3 –∫–≥', portions: '24 –ø–æ—Ä—Ü–∏–∏', price: '+2000 ‚ÇΩ' }
              ].map(item => (
                <button
                  key={item.weight}
                  className={`p-3 border rounded-lg text-center hover:border-chocolate transition ${
                    config.weight === item.weight ? 'border-chocolate bg-rose-50 font-bold' : 'border-gray-300'
                  }`}
                  onClick={() => updateConfig('weight', item.weight)}
                >
                  <div className="font-bold">{item.weight}</div>
                  <div className="text-xs text-gray-600">{item.portions}</div>
                  <div className="text-xs text-chocolate">{item.price}</div>
                </button>
              ))}
            </div>
          </div>
        );
      case 'fillings':
        return (
          <div>
            <h3 className="text-xl font-bold mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫–∏ (–¥–æ 3)</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2 max-h-60 overflow-y-auto p-2">
              {[
                '–®–æ–∫–æ–ª–∞–¥–Ω–∞—è —Å –∞—Ä–∞—Ö–∏—Å–æ–º –∏ –∫–∞—Ä–∞–º–µ–ª—å—é',
                '–¢–≤–æ—Ä–æ–∂–Ω–æ-—è–≥–æ–¥–Ω–∞—è',
                '–í–∞–Ω–∏–ª—å–Ω–∞—è —Å —Ñ—Ä—É–∫—Ç–∞–º–∏',
                '–û—Ä–µ—Ö–æ–≤–∞—è —Å –º–µ–¥–æ–º',
                '–ö—Ä–µ–º-–±—Ä—é–ª–µ',
                '–ú–∞–ª–∏–Ω–æ–≤–∞—è —Å –º–∞–∫–æ–º',
                '–ö–æ—Ñ–µ–π–Ω–∞—è —Å —à–æ–∫–æ–ª–∞–¥–æ–º',
                '–õ–∏–º–æ–Ω–Ω–∞—è —Å –º–∞–ª–∏–Ω–æ–π',
                '–ë–∞–Ω–∞–Ω–æ–≤–∞—è —Å –∫–∞—Ä–∞–º–µ–ª—å—é',
                '–ö–ª—É–±–Ω–∏—á–Ω–∞—è —Å —Å–ª–∏–≤–∫–∞–º–∏',
                '–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤–∞—è —Å —à–æ–∫–æ–ª–∞–¥–æ–º',
                '–§–∏—Å—Ç–∞—à–∫–æ–≤–∞—è —Å –º–∞–ª–∏–Ω–æ–π'
              ].map(filling => (
                <div
                  key={filling}
                  onClick={() => {
                    const currentFillings = [...config.fillings];
                    if (currentFillings.includes(filling)) {
                      updateConfig('fillings', currentFillings.filter(f => f !== filling));
                    } else if (currentFillings.length < 3) {
                      updateConfig('fillings', [...currentFillings, filling]);
                    }
                  }}
                  className={`p-3 border rounded-lg cursor-pointer transition ${
                    config.fillings.includes(filling)
                      ? 'border-chocolate bg-rose-50'
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                >
                  <div className="flex items-center">
                    <div className={`w-5 h-5 rounded-full border mr-3 flex items-center justify-center ${
                      config.fillings.includes(filling) ? 'bg-chocolate border-chocolate' : 'border-gray-400'
                    }`}>
                      {config.fillings.includes(filling) && (
                        <span className="text-white text-xs">‚úì</span>
                      )}
                    </div>
                    <span className="text-sm">{filling}</span>
                  </div>
                </div>
              ))}
            </div>
            <div className="mt-2 text-sm text-gray-600">
              –í—ã–±—Ä–∞–Ω–æ: {config.fillings.length}/3 –Ω–∞—á–∏–Ω–æ–∫
            </div>
          </div>
        );
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–±–Ω—É—é –ª–æ–≥–∏–∫—É
      default:
        return (
          <div>
            <h3 className="text-xl font-bold mb-4">–®–∞–≥: {currentStep}</h3>
            <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —à–∞–≥–∞ {currentStep} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ.</p>
          </div>
        );
    }
  };

  const isStepValid = () => {
    switch (currentStep) {
      case 'event':
        return config.event !== '';
      case 'type':
        return config.type !== '';
      case 'shape':
        return config.shape !== '';
      case 'weight':
        return config.weight !== '';
      case 'fillings':
        return config.fillings.length > 0;
      default:
        return true;
    }
  };

  const currentIndex = steps.findIndex(s => s.id === currentStep);

  return (
    <div className="min-h-screen bg-cream py-8">
      <Head>
        <title>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–æ—Ä—Ç–æ–≤ - –£–µ–∑–¥–Ω—ã–π –ö–æ–Ω–¥–∏—Ç–µ—Ä</title>
        <meta name="description" content="–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ—Ä—Ç —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞" />
      </Head>

      <div className="max-w-4xl mx-auto px-4">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-serif font-bold text-chocolate">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–æ—Ä—Ç–æ–≤</h1>
          <p className="text-gray-600">–°–æ–∑–¥–∞–π—Ç–µ —Ç–æ—Ä—Ç —Å–≤–æ–µ–π –º–µ—á—Ç—ã —à–∞–≥ –∑–∞ —à–∞–≥–æ–º</p>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
        <div className="mb-8">
          <div className="flex justify-between mb-2 text-sm">
            {steps.map((step, index) => (
              <span
                key={step.id}
                className={`px-2 py-1 rounded-full ${
                  index <= currentIndex
                    ? 'bg-chocolate text-white'
                    : 'bg-gray-200 text-gray-600'
                }`}
              >
                {step.title}
              </span>
            ))}
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2.5">
            <div
              className="bg-chocolate h-2.5 rounded-full transition-all duration-500"
              style={{ width: `${((currentIndex + 1) / steps.length) * 100}%` }}
            ></div>
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —à–∞–≥–∞ */}
        <div className="bg-white rounded-xl shadow-md p-6 mb-6">
          {renderStepContent()}
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex justify-between">
          <button
            onClick={prevStep}
            disabled={currentIndex === 0}
            className={`px-6 py-2 rounded-lg font-medium ${
              currentIndex === 0
                ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                : 'bg-gray-300 text-gray-700 hover:bg-gray-400'
            }`}
          >
            –ù–∞–∑–∞–¥
          </button>
          {currentIndex === steps.length - 1 ? (
            <button
              onClick={() => alert('–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!')} // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
              className="px-6 py-2 bg-chocolate text-white rounded-lg font-medium hover:bg-dark-chocolate"
            >
              –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
          ) : (
            <button
              onClick={nextStep}
              disabled={!isStepValid()}
              className={`px-6 py-2 rounded-lg font-medium ${
                !isStepValid()
                  ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                  : 'bg-chocolate text-white hover:bg-dark-chocolate'
              }`}
            >
              –î–∞–ª–µ–µ
            </button>
          )}
        </div>

        <div className="mt-6 text-center">
          <Link href="/" className="text-chocolate hover:underline">
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </Link>
        </div>
      </div>
    </div>
  );
};

export default CakeBuilder;
